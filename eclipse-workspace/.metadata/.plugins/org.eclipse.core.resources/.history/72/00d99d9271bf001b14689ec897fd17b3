//package BeakJun_example;

import java.io.*;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
    static String A;
    static String B;
    static ArrayList<Integer> arr_A = new ArrayList<Integer>();  
    static ArrayList<Integer> arr_B = new ArrayList<Integer>();  
    //static int []result;
    static int max;

    static void Input() throws IOException{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine());
        
        A = st.nextToken();
        B = st.nextToken();

        for(int i = 0; i < A.length(); i++){

            arr_A.add((int) A.charAt(i) - '0');
            
        }
        for(int i = 0; i < B.length(); i++){

            arr_B.add((int) B.charAt(i) - '0');

        }
        max = Math.max(A.length(), B.length());

        

        br.close();

    }

    static void Solution() throws IOException{

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int temp = 0, gap = 0;
        int []result = new int[max + 1];

        for(int i = 0; i < max + 1; i++){
            result[i] = 0;
        }

        if(A.length() > B.length()){
            gap = A.length() - B.length();

            for(int i = arr_B.size() - 1; i >= 0; i--){

                temp = arr_A.get(i + gap) + arr_B.get(i);

                if(temp >= 10){
                    result[i + gap + 1] += temp % 10;
                    result[i + gap] += 1;
                    
                }
            }

            for(int i = 1; i <= gap; i++){

                result[i] += arr_A.get(i);
                
            }
        }
        else if(A.length() < B.length()){
            gap = B.length() - A.length();

            for(int i = arr_A.size() - 1; i >= 0; i--){

                temp = arr_A.get(i) + arr_B.get(i + gap);

                if(temp >= 10){
                    result[i + gap + 1] += temp % 10;
                    result[i + gap] += 1;
                }
            }

            for(int i = 1; i <= gap; i++){

                result[i] += arr_B.get(i);

            }
        }
        else if(A.length() == B.length()){

            for(int i = arr_A.size() - 1; i >= 0; i--){

                temp = arr_A.get(i) + arr_B.get(i);

                if(temp >= 10){
                    result[i + 1] += temp % 10;
                    result[i] += 1;
                }
            }

        }
        
        for(int i = max; i > 0; i--) {
        	if(result[i] == 10) {
            	result[i] %= 10;
            	result[i - 1] += 1;
            }
        }

        if(result[0] == 0){

            for(int i = 1; i < max + 1; i++){

                bw.write(result[i] + "");

            }
            
        }
        if(result[0] == 1){

            for(int i = 0; i < max + 1; i++){

                bw.write(result[i] + "");

            }

        }bw.newLine();

        bw.flush();
        bw.close();

    }
    
    static void Solve() throws IOException{

        Input();

        Solution();

    }

    public static void main(String[] args) throws IOException{
        
        Solve();

    }
}
